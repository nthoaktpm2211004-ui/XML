#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
XML Processor - ·ª®ng d·ª•ng x·ª≠ l√Ω XML v√† l∆∞u v√†o MySQL
T√°c gi·∫£: Nguy·ªÖn Tr·∫ßn Tu·∫•n Kh√¥i
M√¥ t·∫£: Parse XML, validate v·ªõi XSD, v√† l∆∞u d·ªØ li·ªáu v√†o MySQL
"""

import xml.etree.ElementTree as ET
import mysql.connector
from mysql.connector import Error
from lxml import etree
import sys
import os
from typing import List, Dict, Tuple, Optional

# Fix encoding cho Windows
if sys.platform == "win32":
    import codecs
    sys.stdout = codecs.getwriter("utf-8")(sys.stdout.detach())
    sys.stderr = codecs.getwriter("utf-8")(sys.stderr.detach())

class XMLProcessor:
    def __init__(self, xml_file: str, xsd_file: str, db_config: Dict):
        """
        Kh·ªüi t·∫°o XML Processor
        
        Args:
            xml_file: ƒê∆∞·ªùng d·∫´n ƒë·∫øn file XML
            xsd_file: ƒê∆∞·ªùng d·∫´n ƒë·∫øn file XSD
            db_config: C·∫•u h√¨nh k·∫øt n·ªëi MySQL
        """
        self.xml_file = xml_file
        self.xsd_file = xsd_file
        self.db_config = db_config
        self.connection = None
        self.cursor = None
        
    def parse_xml_xsd(self) -> Tuple[etree._Element, etree.XMLSchema]:
        """
        Parse file XML v√† XSD
        
        Returns:
            Tuple ch·ª©a XML root element v√† XMLSchema object
        """
        try:
            # Parse XML file
            print(f"üìÑ ƒêang parse file XML: {self.xml_file}")
            xml_doc = etree.parse(self.xml_file)
            xml_root = xml_doc.getroot()
            
            # Parse XSD file v√† t·∫°o XMLSchema object
            print(f"üìã ƒêang parse file XSD: {self.xsd_file}")
            xsd_doc = etree.parse(self.xsd_file)
            xml_schema = etree.XMLSchema(xsd_doc)
            
            print("‚úÖ Parse XML v√† XSD th√†nh c√¥ng!")
            return xml_root, xml_schema
            
        except etree.XMLSyntaxError as e:
            print(f"‚ùå L·ªói c√∫ ph√°p XML: {e}")
            sys.exit(1)
        except etree.XMLSchemaParseError as e:
            print(f"‚ùå L·ªói parse XSD: {e}")
            sys.exit(1)
        except FileNotFoundError as e:
            print(f"‚ùå Kh√¥ng t√¨m th·∫•y file: {e}")
            sys.exit(1)
        except Exception as e:
            print(f"‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh khi parse: {e}")
            sys.exit(1)
    
    def validate_xml(self, xml_root: etree._Element, xml_schema: etree.XMLSchema) -> bool:
        """
        Validate XML v·ªõi XSD
        
        Args:
            xml_root: XML root element
            xml_schema: XMLSchema object
            
        Returns:
            True n·∫øu XML h·ª£p l·ªá, False n·∫øu kh√¥ng
        """
        try:
            print("üîç ƒêang validate XML v·ªõi XSD...")
            
            # Validate XML v·ªõi XSD
            is_valid = xml_schema.validate(xml_root)
            
            if is_valid:
                print("‚úÖ XML h·ª£p l·ªá v·ªõi XSD!")
                return True
            else:
                print("‚ùå XML kh√¥ng h·ª£p l·ªá v·ªõi XSD!")
                print("üìã Chi ti·∫øt l·ªói:")
                
                # In ra c√°c l·ªói c·ª• th·ªÉ
                for error in xml_schema.error_log:
                    print(f"   - D√≤ng {error.line}: {error.message}")
                
                return False
                
        except Exception as e:
            print(f"‚ùå L·ªói khi validate: {e}")
            return False
    
    def connect_mysql(self) -> bool:
        """
        K·∫øt n·ªëi ƒë·∫øn MySQL database
        
        Returns:
            True n·∫øu k·∫øt n·ªëi th√†nh c√¥ng, False n·∫øu kh√¥ng
        """
        try:
            print("üîå ƒêang k·∫øt n·ªëi MySQL...")
            self.connection = mysql.connector.connect(**self.db_config)
            self.cursor = self.connection.cursor()
            print("‚úÖ K·∫øt n·ªëi MySQL th√†nh c√¥ng!")
            return True
            
        except Error as e:
            print(f"‚ùå L·ªói k·∫øt n·ªëi MySQL: {e}")
            return False
    
    def create_tables(self):
        """
        T·∫°o b·∫£ng Categories v√† Products n·∫øu ch∆∞a c√≥
        """
        try:
            print("üèóÔ∏è  ƒêang t·∫°o b·∫£ng...")
            
            # T·∫°o b·∫£ng Categories
            create_categories_table = """
            CREATE TABLE IF NOT EXISTS Categories (
                id VARCHAR(10) PRIMARY KEY,
                name VARCHAR(255) NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
            )
            """
            
            # T·∫°o b·∫£ng Products
            create_products_table = """
            CREATE TABLE IF NOT EXISTS Products (
                id VARCHAR(10) PRIMARY KEY,
                name VARCHAR(255) NOT NULL,
                price DECIMAL(10,2) NOT NULL,
                currency VARCHAR(10) NOT NULL,
                stock INT NOT NULL,
                category_id VARCHAR(10) NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                FOREIGN KEY (category_id) REFERENCES Categories(id)
            )
            """
            
            self.cursor.execute(create_categories_table)
            self.cursor.execute(create_products_table)
            self.connection.commit()
            
            print("‚úÖ T·∫°o b·∫£ng th√†nh c√¥ng!")
            
        except Error as e:
            print(f"‚ùå L·ªói t·∫°o b·∫£ng: {e}")
            sys.exit(1)
    
    def extract_data_with_xpath(self, xml_root: etree._Element) -> Tuple[List[Dict], List[Dict]]:
        """
        S·ª≠ d·ª•ng XPath ƒë·ªÉ l·∫•y d·ªØ li·ªáu t·ª´ categories v√† products
        
        Args:
            xml_root: XML root element
            
        Returns:
            Tuple ch·ª©a danh s√°ch categories v√† products
        """
        try:
            print("üîç ƒêang extract d·ªØ li·ªáu b·∫±ng XPath...")
            
            # Extract categories b·∫±ng XPath
            categories = []
            category_elements = xml_root.xpath('//category')
            
            for category in category_elements:
                category_data = {
                    'id': category.get('id'),
                    'name': category.text.strip()
                }
                categories.append(category_data)
            
            # Extract products b·∫±ng XPath
            products = []
            product_elements = xml_root.xpath('//product')
            
            for product in product_elements:
                product_data = {
                    'id': product.get('id'),
                    'categoryRef': product.get('categoryRef'),
                    'name': product.xpath('name')[0].text.strip(),
                    'price': float(product.xpath('price')[0].text.strip()),
                    'currency': product.xpath('price')[0].get('currency'),
                    'stock': int(product.xpath('stock')[0].text.strip())
                }
                products.append(product_data)
            
            print(f"‚úÖ Extract th√†nh c√¥ng: {len(categories)} categories, {len(products)} products")
            return categories, products
            
        except Exception as e:
            print(f"‚ùå L·ªói extract d·ªØ li·ªáu: {e}")
            sys.exit(1)
    
    def insert_or_update_categories(self, categories: List[Dict]):
        """
        Insert ho·∫∑c update d·ªØ li·ªáu v√†o b·∫£ng Categories
        
        Args:
            categories: Danh s√°ch categories
        """
        try:
            print("üìù ƒêang x·ª≠ l√Ω b·∫£ng Categories...")
            
            for category in categories:
                # Ki·ªÉm tra xem category ƒë√£ t·ªìn t·∫°i ch∆∞a
                check_query = "SELECT id FROM Categories WHERE id = %s"
                self.cursor.execute(check_query, (category['id'],))
                exists = self.cursor.fetchone()
                
                if exists:
                    # Update n·∫øu ƒë√£ t·ªìn t·∫°i
                    update_query = """
                    UPDATE Categories 
                    SET name = %s, updated_at = CURRENT_TIMESTAMP 
                    WHERE id = %s
                    """
                    self.cursor.execute(update_query, (category['name'], category['id']))
                    print(f"   üîÑ Updated category: {category['id']} - {category['name']}")
                else:
                    # Insert n·∫øu ch∆∞a t·ªìn t·∫°i
                    insert_query = """
                    INSERT INTO Categories (id, name) 
                    VALUES (%s, %s)
                    """
                    self.cursor.execute(insert_query, (category['id'], category['name']))
                    print(f"   ‚ûï Inserted category: {category['id']} - {category['name']}")
            
            self.connection.commit()
            print("‚úÖ X·ª≠ l√Ω b·∫£ng Categories ho√†n th√†nh!")
            
        except Error as e:
            print(f"‚ùå L·ªói x·ª≠ l√Ω Categories: {e}")
            self.connection.rollback()
            sys.exit(1)
    
    def insert_or_update_products(self, products: List[Dict]):
        """
        Insert ho·∫∑c update d·ªØ li·ªáu v√†o b·∫£ng Products
        
        Args:
            products: Danh s√°ch products
        """
        try:
            print("üìù ƒêang x·ª≠ l√Ω b·∫£ng Products...")
            
            for product in products:
                # Ki·ªÉm tra xem product ƒë√£ t·ªìn t·∫°i ch∆∞a
                check_query = "SELECT id FROM Products WHERE id = %s"
                self.cursor.execute(check_query, (product['id'],))
                exists = self.cursor.fetchone()
                
                if exists:
                    # Update n·∫øu ƒë√£ t·ªìn t·∫°i
                    update_query = """
                    UPDATE Products 
                    SET name = %s, price = %s, currency = %s, stock = %s, 
                        category_id = %s, updated_at = CURRENT_TIMESTAMP 
                    WHERE id = %s
                    """
                    self.cursor.execute(update_query, (
                        product['name'], product['price'], product['currency'],
                        product['stock'], product['categoryRef'], product['id']
                    ))
                    print(f"   üîÑ Updated product: {product['id']} - {product['name']}")
                else:
                    # Insert n·∫øu ch∆∞a t·ªìn t·∫°i
                    insert_query = """
                    INSERT INTO Products (id, name, price, currency, stock, category_id) 
                    VALUES (%s, %s, %s, %s, %s, %s)
                    """
                    self.cursor.execute(insert_query, (
                        product['id'], product['name'], product['price'],
                        product['currency'], product['stock'], product['categoryRef']
                    ))
                    print(f"   ‚ûï Inserted product: {product['id']} - {product['name']}")
            
            self.connection.commit()
            print("‚úÖ X·ª≠ l√Ω b·∫£ng Products ho√†n th√†nh!")
            
        except Error as e:
            print(f"‚ùå L·ªói x·ª≠ l√Ω Products: {e}")
            self.connection.rollback()
            sys.exit(1)
    
    def close_connection(self):
        """ƒê√≥ng k·∫øt n·ªëi MySQL"""
        if self.cursor:
            self.cursor.close()
        if self.connection and self.connection.is_connected():
            self.connection.close()
            print("üîå ƒê√£ ƒë√≥ng k·∫øt n·ªëi MySQL")
    
    def process(self):
        """
        Th·ª±c hi·ªán to√†n b·ªô quy tr√¨nh x·ª≠ l√Ω
        """
        try:
            print("üöÄ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω XML...")
            print("=" * 50)
            
            # B∆∞·ªõc 1: Parse XML v√† XSD
            xml_root, xml_schema = self.parse_xml_xsd()
            
            # B∆∞·ªõc 2: Validate XML v·ªõi XSD
            if not self.validate_xml(xml_root, xml_schema):
                print("‚ùå D·ª´ng x·ª≠ l√Ω do XML kh√¥ng h·ª£p l·ªá!")
                return
            
            # B∆∞·ªõc 3: K·∫øt n·ªëi MySQL
            if not self.connect_mysql():
                print("‚ùå D·ª´ng x·ª≠ l√Ω do kh√¥ng th·ªÉ k·∫øt n·ªëi MySQL!")
                return
            
            # B∆∞·ªõc 4: T·∫°o b·∫£ng
            self.create_tables()
            
            # B∆∞·ªõc 5: Extract d·ªØ li·ªáu b·∫±ng XPath
            categories, products = self.extract_data_with_xpath(xml_root)
            
            # B∆∞·ªõc 6: Insert/Update v√†o MySQL
            self.insert_or_update_categories(categories)
            self.insert_or_update_products(products)
            
            print("=" * 50)
            print("üéâ X·ª≠ l√Ω ho√†n th√†nh th√†nh c√¥ng!")
            
        except Exception as e:
            print(f"‚ùå L·ªói trong qu√° tr√¨nh x·ª≠ l√Ω: {e}")
        finally:
            self.close_connection()


def main():
    """H√†m main"""
    # C·∫•u h√¨nh k·∫øt n·ªëi MySQL cho Laragon
    db_config = {
        'host': 'localhost',
        'database': 'xml_processor_db',
        'user': 'root',
        'password': '',  # Laragon m·∫∑c ƒë·ªãnh kh√¥ng c√≥ password
        'charset': 'utf8mb4',
        'collation': 'utf8mb4_unicode_ci'
    }
    
    # T·∫°o processor v√† th·ª±c hi·ªán x·ª≠ l√Ω
    processor = XMLProcessor('catalog.xml', 'catalog.xsd', db_config)
    processor.process()


if __name__ == "__main__":
    main()
